{"version":3,"sources":["components/FriendCard/index.js","components/Jumbotron/Jumbotron.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","handleShuffle","id","alt","name","src","image","Jumbotron","Navbar","href","msg","score","highScore","App","state","friends","selectCardId","showMsg","correctGuess","shuffleFriends","array","i","length","j","Math","floor","random","removeFriend","filter","friend","setState","selectId","previousCardSelect","shuffledFriends","highScoreChange","scoreChange","updateMsg","correctAnswer","testClick","console","log","displayMsg","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"0tFAiBeA,MAdf,SAAoBC,GAElB,OAEI,yBAAKC,UAAU,OAAOC,QAAS,kBAAIF,EAAMG,cAAcH,EAAMI,MAC3D,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,OCI5BC,MAXf,WACI,OACI,yBAAKR,UAAU,8BACrB,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,aAAd,gBACA,wBAAIA,UAAU,QAAd,+E,MCaWS,MAjBf,SAAgBV,GACZ,OAEI,yBAAKC,UAAU,6DACX,uBAAGU,KAAK,KACJ,0BAAMV,UAAU,sBAAhB,gBAEJ,4BAAKD,EAAMY,KACX,wBAAIX,UAAU,0CACV,wBAAIA,UAAU,8BAAd,UAAmDD,EAAMa,OACzD,wBAAIZ,UAAU,6BAAd,cAAsDD,EAAMc,cCwG7DC,E,2MAvGbC,MAAQ,CACNC,UACAJ,MAAM,EACNC,UAAU,EACVI,aAAa,EACbN,IAAI,CAAC,2BAA2B,yBAAyB,4BACzDO,SAAQ,EACRC,cAAa,G,EAGfC,eAAe,SAACC,GACd,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,G,EAGTO,aAAe,SAAAzB,GAEb,IAAMa,EAAU,EAAKD,MAAMC,QAAQa,QAAO,SAAAC,GAAM,OAAIA,EAAO3B,KAAOA,KAElE,EAAK4B,SAAS,CAAEf,a,EAGlBd,cAAgB,SAACC,GAEf,IAAI6B,EAAS7B,EACT8B,EAAmB,EAAKlB,MAAME,aAC9BiB,EAAkB,EAAKd,eAAeJ,GACtCmB,EAAgB,EAAKpB,MAAMF,UAC3BuB,EAAY,EAAKrB,MAAMH,MACvByB,EAAU,EAAKtB,MAAMJ,IACrB2B,EAAc,EAAKvB,MAAMI,aAE1Ba,IAAaC,GACdI,GAAU,EACVC,GAAc,EACXF,IAAcD,GACbC,IACAD,KAGAC,IAEJ,EAAKL,SAAS,CACZf,QAAQkB,EACRjB,aAAae,EACbpB,MAAMwB,EACNvB,UAAUsB,EACVjB,QAAQmB,EACRlB,aAAamB,MAEfD,GAAU,EACVC,GAAc,EACd,EAAKP,SAAS,CACZf,QAAQkB,EACRjB,aAAae,EACbpB,MAAM,EACNC,UAAUsB,EACVjB,QAAQmB,EACRlB,aAAamB,M,EAInBC,UAAW,WAETC,QAAQC,IAAK,c,wEAIL,IACJC,EADG,OAWP,OAREA,GADsB,IAArBC,KAAK5B,MAAMG,QACDyB,KAAK5B,MAAMJ,IAAI,GAClBgC,KAAK5B,MAAMI,aACRwB,KAAK5B,MAAMJ,IAAI,GAEfgC,KAAK5B,MAAMJ,IAAI,GAK1B,6BACE,kBAAC,EAAD,CAAQC,MAAO+B,KAAK5B,MAAMH,MAAOC,UAAW8B,KAAK5B,MAAMF,UAAWF,IAAK+B,IACvE,kBAAC,EAAD,MACA,yBAAK1C,UAAU,aACZ2C,KAAK5B,MAAMC,QAAQ4B,KAAI,SAAAd,GAAM,OAC5B,kBAAC,EAAD,CACA3B,GAAI2B,EAAO3B,GACX0C,IAAKf,EAAO3B,GACZE,KAAMyB,EAAOzB,KACbE,MAAOuB,EAAOvB,MACdL,cAAe,EAAKA,yB,GAhGd4C,a,MCNlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b1a32a0b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n\r\n  return (\r\n \r\n      <div className=\"card\" onClick={()=>props.handleShuffle(props.id)}>\r\n        <div className=\"img-container\">\r\n          <img alt={props.name} src={props.image} />\r\n        </div>\r\n      \r\n      </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n\r\n","import React from 'react'\r\n\r\nfunction Jumbotron() {\r\n    return (      \r\n        <div className=\"jumbotron jumbotron-fluid \">\r\n  <div className=\"container text-center\">\r\n    <h1 className=\"display-4\">Clicky Game!</h1>\r\n    <h2 className=\"lead\">Click on an image to earn points, but don't click on any more than once!</h2>\r\n  </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron\r\n","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n      \r\n        <nav className=\"navbar shadow-lg sticky-top d-flex justify-content-around\">\r\n            <a href=\"/\">\r\n                <span className=\"navbar-brand mb-0 \">Clicky Game</span>\r\n            </a>\r\n            <h2>{props.msg}</h2>\r\n            <ul className=\" nav list-group list-group-horizontal \">\r\n                <li className=\"nav-item border-right pr-3\">Score: {props.score}</li>\r\n                <li className=\"nav-item border-left pl-3\">Top Score: {props.highScore}</li>\r\n            </ul>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from \"react\";\r\nimport FriendCard from \"./components/FriendCard\";\r\n// import Wrapper from \"./components/Wrapper\";\r\n// import Title from \"./components/Title\";\r\nimport friends from \"./friends.json\";\r\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\r\nimport Navbar from \"./components/Navbar/Navbar\"\r\n\r\n// import FriendTest from './components/TestFriend'\r\n\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n\r\n  state = {\r\n    friends,\r\n    score:0,\r\n    highScore:0,\r\n    selectCardId:0,\r\n    msg:['Click an image to begin!','You guessed correctly!','You guessed incorrectly!'],\r\n    showMsg:false,\r\n    correctGuess:false\r\n  };\r\n\r\n  shuffleFriends=(array)=> {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  removeFriend = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    const friends = this.state.friends.filter(friend => friend.id !== id);\r\n    // Set this.state.friends equal to the new friends array\r\n    this.setState({ friends });\r\n  };\r\n\r\n  handleShuffle = (id) => {\r\n    //copying all properties in a variable\r\n    let selectId=id\r\n    let previousCardSelect=this.state.selectCardId\r\n    let shuffledFriends = this.shuffleFriends(friends);\r\n    let highScoreChange=this.state.highScore\r\n    let scoreChange=this.state.score\r\n    let updateMsg=this.state.msg\r\n    let correctAnswer=this.state.correctGuess\r\n\r\n    if(selectId !== previousCardSelect){\r\n      updateMsg=true  \r\n      correctAnswer=true\r\n      if(scoreChange===highScoreChange){\r\n          scoreChange++\r\n          highScoreChange++\r\n          \r\n        }else{\r\n          scoreChange++\r\n        }\r\n      this.setState({\r\n        friends:shuffledFriends,\r\n        selectCardId:selectId,\r\n        score:scoreChange,\r\n        highScore:highScoreChange, \r\n        showMsg:updateMsg, \r\n        correctGuess:correctAnswer})\r\n    }else{\r\n      updateMsg=true\r\n      correctAnswer=false\r\n      this.setState({\r\n        friends:shuffledFriends,\r\n        selectCardId:selectId,\r\n        score:0,\r\n        highScore:highScoreChange, \r\n        showMsg:updateMsg, \r\n        correctGuess:correctAnswer})\r\n    }\r\n  };\r\n\r\n  testClick =()=> {\r\n    // e.preventDefault()\r\n    console.log ('test test')\r\n  };\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    let displayMsg\r\n    if(this.state.showMsg===false){\r\n      displayMsg=this.state.msg[0]\r\n    } else if(this.state.correctGuess){\r\n      displayMsg=this.state.msg[1]\r\n    }else{\r\n      displayMsg=this.state.msg[2]\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Navbar score={this.state.score} highScore={this.state.highScore} msg={displayMsg}></Navbar>\r\n        <Jumbotron></Jumbotron>\r\n        <div className=\"container\">\r\n          {this.state.friends.map(friend => (\r\n            <FriendCard\r\n            id={friend.id}\r\n            key={friend.id}\r\n            name={friend.name}\r\n            image={friend.image}\r\n            handleShuffle={this.handleShuffle}\r\n            />\r\n            ))}\r\n\r\n        </div>\r\n      </div>\r\n     \r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}